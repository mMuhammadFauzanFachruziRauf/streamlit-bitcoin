# app.py



import streamlit as st

import pandas as pd

import numpy as np

import yfinance as yf

import joblib

import plotly.graph_objects as go

from tensorflow.keras.models import load_model

from datetime import datetime, timedelta



# =============================================================================

# KONFIGURASI HALAMAN STREAMLIT

# =============================================================================

st.set_page_config(

Â  Â  page_title="Prediksi Harga Bitcoin",

Â  Â  page_icon="â‚¿",

Â  Â  layout="wide"

)



# =============================================================================

# FUNGSI-FUNGSI UTAMA (dengan caching untuk efisiensi)

# =============================================================================



@st.cache_resource

def load_all_assets():

Â  Â  """Memuat semua aset model dan scaler yang sudah dilatih."""

Â  Â  assets = {}

Â  Â  model_dir = 'model/'

Â  Â  try:

Â  Â  Â  Â  # Pastikan path ini benar di repositori Anda

Â  Â  Â  Â  assets['best_model'] = joblib.load(f'{model_dir}best_bitcoin_model.pkl')

Â  Â  Â  Â  assets['feature_scaler'] = joblib.load(f'{model_dir}feature_scaler.pkl')

Â  Â  Â  Â  assets['feature_columns'] = joblib.load(f'{model_dir}feature_columns.pkl')

Â  Â  Â  Â  assets['lstm_model'] = load_model(f'{model_dir}lstm_bitcoin_model.keras')

Â  Â  Â  Â  assets['lstm_scaler'] = joblib.load(f'{model_dir}lstm_scaler.pkl')

Â  Â  Â  Â  st.success("Model dan semua aset berhasil dimuat.")

Â  Â  Â  Â  return assets

Â  Â  except FileNotFoundError as e:

Â  Â  Â  Â  st.error(

Â  Â  Â  Â  Â  Â  f"File tidak ditemukan: {e.filename}. "

Â  Â  Â  Â  Â  Â  f"Pastikan folder 'model' dan semua isinya ada di repositori GitHub Anda "

Â  Â  Â  Â  Â  Â  f"dan path-nya sudah benar."

Â  Â  Â  Â  )

Â  Â  Â  Â  return None

Â  Â  except Exception as e:

Â  Â  Â  Â  st.error(f"Terjadi kesalahan saat memuat aset model: {e}")

Â  Â  Â  Â  return None



# --- FUNGSI DATA DIPERBARUI UNTUK YFINANCE MODERN ---

@st.cache_data(ttl=3600) # Cache data selama 1 jam

def load_data(ticker="BTC-USD"):

Â  Â  """

Â  Â  Mengambil data historis Bitcoin terbaru.

Â  Â  yfinance versi terbaru menangani sesi secara otomatis menggunakan curl_cffi.

Â  Â  """

Â  Â  st.info("Mengambil data terbaru dari server yfinance...")

Â  Â  try:

Â  Â  Â  Â  # yfinance modern tidak memerlukan session manual.

Â  Â  Â  Â  # Ia akan otomatis menggunakan backend yang lebih canggih.

Â  Â  Â  Â  data = yf.download(

Â  Â  Â  Â  Â  Â  tickers=ticker,

Â  Â  Â  Â  Â  Â  period="200d",

Â  Â  Â  Â  Â  Â  auto_adjust=True,

Â  Â  Â  Â  Â  Â  progress=False # Menonaktifkan progress bar di log

Â  Â  Â  Â  )

Â  Â  Â  Â 

Â  Â  Â  Â  if data.empty:

Â  Â  Â  Â  Â  Â  st.error(f"Tidak ada data yang diterima dari yfinance untuk ticker {ticker}. Ini mungkin masalah sementara atau ticker tidak valid.")

Â  Â  Â  Â  Â  Â  return None

Â  Â  Â  Â 

Â  Â  Â  Â  st.success("Data berhasil diambil dari yfinance.")

Â  Â  Â  Â  data.rename(columns={

Â  Â  Â  Â  Â  Â  'Open': 'Open', 'High': 'High', 'Low': 'Low',

Â  Â  Â  Â  Â  Â  'Close': 'Close', 'Volume': 'Volume'

Â  Â  Â  Â  }, inplace=True, errors='ignore')

Â  Â  Â  Â  return data



Â  Â  except Exception as e:

Â  Â  Â  Â  st.error(f"Gagal mengambil data dari yfinance. Kesalahan: {e}")

Â  Â  Â  Â  return None



def create_features(df):

Â  Â  """Membuat fitur teknikal yang konsisten dengan saat pelatihan."""

Â  Â  df_feat = df.copy()

Â  Â  df_feat['MA_7'] = df_feat['Close'].rolling(window=7).mean()

Â  Â  df_feat['MA_30'] = df_feat['Close'].rolling(window=30).mean()

Â  Â  df_feat['MA_90'] = df_feat['Close'].rolling(window=90).mean()

Â  Â  df_feat['Daily_Return'] = df_feat['Close'].pct_change()

Â  Â  df_feat['Volatility_7'] = df_feat['Daily_Return'].rolling(window=7).std()

Â  Â  for lag in [1, 2, 3, 7, 14]:

Â  Â  Â  Â  df_feat[f'Close_lag_{lag}'] = df_feat['Close'].shift(lag)

Â  Â  Â  Â  df_feat[f'Volume_lag_{lag}'] = df_feat['Volume'].shift(lag)

Â  Â  df_feat.dropna(inplace=True)

Â  Â  return df_feat



# =============================================================================

# TAMPILAN DAN LOGIKA APLIKASI STREAMLIT

# =============================================================================



st.title("â‚¿ Prediksi & Analisis Harga Bitcoin (BTC-USD)")

st.markdown("Aplikasi interaktif untuk memprediksi harga penutupan Bitcoin esok hari.")



assets = load_all_assets()



if assets:

Â  Â  st.sidebar.header("Opsi Prediksi")

Â  Â  model_options = {

Â  Â  Â  Â  "Model Terbaik (Regresi Linear)": "best_model",

Â  Â  Â  Â  "Model LSTM": "lstm_model"

Â  Â  }

Â  Â  selected_model_display = st.sidebar.selectbox(

Â  Â  Â  Â  "Pilih Model untuk Prediksi:",

Â  Â  Â  Â  options=list(model_options.keys())

Â  Â  )

Â  Â  selected_model_code = model_options[selected_model_display]



Â  Â  if st.sidebar.button("ðŸš€ Lakukan Prediksi Harga Besok"):

Â  Â  Â  Â  raw_data = load_data()



Â  Â  Â  Â  if raw_data is not None and len(raw_data) > 90:

Â  Â  Â  Â  Â  Â  with st.spinner("Membuat fitur dan melakukan prediksi..."):

Â  Â  Â  Â  Â  Â  Â  Â  feature_data = create_features(raw_data.copy())



Â  Â  Â  Â  Â  Â  Â  Â  if not feature_data.empty:

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  prediction = 0.0

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if selected_model_code == "lstm_model":

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  model = assets['lstm_model']

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  scaler = assets['lstm_scaler']

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  lookback = 60

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if len(raw_data) >= lookback:

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  latest_prices = raw_data['Close'].iloc[-lookback:].values.reshape(-1, 1)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  latest_scaled = scaler.transform(latest_prices)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  input_lstm = np.reshape(latest_scaled, (1, lookback, 1))

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  prediction_scaled = model.predict(input_lstm)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  prediction = scaler.inverse_transform(prediction_scaled)[0][0]

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  else:

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.warning(f"Data tidak cukup untuk lookback LSTM ({len(raw_data)}/{lookback} baris tersedia).")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.stop()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  else: # 'best_model'

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  model = assets['best_model']

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  scaler = assets['feature_scaler']

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  feature_columns = assets['feature_columns']

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  latest_input_df = feature_data[feature_columns].iloc[-1:]

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  input_scaled = scaler.transform(latest_input_df)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  prediction = model.predict(input_scaled)[0]

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.success("Prediksi berhasil dibuat!")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  history_df = raw_data.tail(90)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  prediction_date = history_df.index[-1].to_pydatetime() + timedelta(days=1)



Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.subheader("Informasi Data")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  col_info1, col_info2 = st.columns(2)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  with col_info1:

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.info(f"Tanggal historis terakhir: **{history_df.index[-1].strftime('%d %b %Y')}**")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  with col_info2:

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.info(f"Tanggal yang sedang diprediksi: **{prediction_date.strftime('%d %b %Y')}**")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.divider()



Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # --- PERBAIKAN: Memastikan harga terakhir adalah skalar ---

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # Mengambil data penutupan, dan memastikannya berupa Series

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  close_data = raw_data['Close']

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if isinstance(close_data, pd.DataFrame):

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # Jika yfinance mengembalikan DataFrame (misalnya, karena multi-index),

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # ambil kolom pertama untuk menjadikannya Series.

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  close_data = close_data.iloc[:, 0]



Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # Sekarang 'close_data' dijamin berupa Series, lanjutkan seperti biasa.

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  latest_close_series = close_data.tail(1)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if latest_close_series.empty:

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.error("Tidak dapat menemukan data harga terakhir yang valid. Data mentah mungkin kosong di bagian akhir.")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.stop()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  current_price = latest_close_series.item()



Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # --- BLOK KODE UNTUK VALIDASI ---

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # Memastikan harga saat ini dan prediksi adalah angka yang valid sebelum digunakan.

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if pd.isna(current_price) or not isinstance(current_price, (int, float, np.number)):

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.error(f"Gagal memproses harga terakhir yang valid dari data. Nilai yang diterima: '{current_price}'. Coba lagi nanti.")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.stop() # Menghentikan eksekusi skrip untuk menghindari error lebih lanjut

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if pd.isna(prediction) or not isinstance(prediction, (int, float, np.number)):

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.error(f"Model menghasilkan prediksi yang tidak valid. Nilai prediksi: '{prediction}'.")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.stop()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # --- AKHIR BLOK KODE VALIDASI ---



Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  price_change = prediction - current_price

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  pct_change = (price_change / current_price) * 100



Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.subheader("Hasil Prediksi untuk Esok Hari")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  col1, col2, col3 = st.columns(3)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  col1.metric("Harga Terakhir (Saat Ini)", f"${current_price:,.2f}")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  col2.metric("Prediksi Harga Besok", f"${prediction:,.2f}", f"${price_change:.2f} ({pct_change:.2f}%)")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  col3.info(f"Model: **{selected_model_display}**")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.subheader("Visualisasi Harga")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fig = go.Figure()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fig.add_trace(go.Scatter(x=history_df.index, y=history_df['Close'], mode='lines', name='Harga Historis'))

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fig.add_trace(go.Scatter(

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  x=[prediction_date], y=[prediction], mode='markers', name='Harga Prediksi',

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  marker=dict(color='orange', size=12, symbol='star', line=dict(width=1, color='darkorange')),

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  hovertemplate=f"<b>Prediksi untuk {prediction_date.strftime('%d %b %Y')}</b><br>Harga: ${prediction:,.2f}<extra></extra>"

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fig.update_layout(

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title='Pergerakan Harga Bitcoin: 90 Hari Terakhir & Prediksi Besok',

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xaxis_title='Tanggal',

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  yaxis_title='Harga (USD)',

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  template='plotly_dark'

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.plotly_chart(fig, use_container_width=True)

Â  Â  Â  Â  Â  Â  Â  Â  else:

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.warning("Tidak cukup data untuk membuat fitur setelah proses pembersihan. Periksa data mentah.")

Â  Â  Â  Â 

Â  Â  Â  Â  elif raw_data is not None:

Â  Â  Â  Â  Â  Â  Â st.warning(f"Tidak cukup data historis dari yfinance untuk membuat fitur (diperlukan > 90 hari, didapatkan {len(raw_data)} hari).")



Â  Â  st.sidebar.markdown("---")

Â  Â  st.sidebar.info("Aplikasi ini dibuat untuk tujuan edukasi dan bukan merupakan nasihat keuangan. Selalu lakukan riset Anda sendiri (DYOR).")

else:

Â  Â  st.error("Aplikasi tidak dapat berjalan karena aset model gagal dimuat. Pastikan folder 'model' dan isinya sudah benar di repositori Anda dan periksa log aplikasi untuk detailnya.")

